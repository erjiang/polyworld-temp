# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bct', [dirname(__file__)])
        except ImportError:
            import _bct
            return _bct
        if fp is not None:
            try:
                _mod = imp.load_module('_bct', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bct = swig_import_helper()
    del swig_import_helper
else:
    import _bct
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bct.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _bct.SwigPyIterator_value(self)
    def incr(self, n = 1): return _bct.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _bct.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _bct.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _bct.SwigPyIterator_equal(self, *args)
    def copy(self): return _bct.SwigPyIterator_copy(self)
    def next(self): return _bct.SwigPyIterator_next(self)
    def __next__(self): return _bct.SwigPyIterator___next__(self)
    def previous(self): return _bct.SwigPyIterator_previous(self)
    def advance(self, *args): return _bct.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _bct.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _bct.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _bct.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _bct.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _bct.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _bct.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _bct.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class bct_exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bct_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bct_exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bct.new_bct_exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bct.delete_bct_exception
    __del__ = lambda self : None;
bct_exception_swigregister = _bct.bct_exception_swigregister
bct_exception_swigregister(bct_exception)


def assortativity_dir(*args):
  return _bct.assortativity_dir(*args)
assortativity_dir = _bct.assortativity_dir

def assortativity_und(*args):
  return _bct.assortativity_und(*args)
assortativity_und = _bct.assortativity_und

def degrees_und(*args):
  return _bct.degrees_und(*args)
degrees_und = _bct.degrees_und

def density_dir(*args):
  return _bct.density_dir(*args)
density_dir = _bct.density_dir

def density_und(*args):
  return _bct.density_und(*args)
density_und = _bct.density_und

def jdegree(*args):
  return _bct.jdegree(*args)
jdegree = _bct.jdegree

def jdegree_bl(*args):
  return _bct.jdegree_bl(*args)
jdegree_bl = _bct.jdegree_bl

def jdegree_id(*args):
  return _bct.jdegree_id(*args)
jdegree_id = _bct.jdegree_id

def jdegree_od(*args):
  return _bct.jdegree_od(*args)
jdegree_od = _bct.jdegree_od

def matching_ind(*args):
  return _bct.matching_ind(*args)
matching_ind = _bct.matching_ind

def matching_ind_in(*args):
  return _bct.matching_ind_in(*args)
matching_ind_in = _bct.matching_ind_in

def matching_ind_out(*args):
  return _bct.matching_ind_out(*args)
matching_ind_out = _bct.matching_ind_out

def strengths_und(*args):
  return _bct.strengths_und(*args)
strengths_und = _bct.strengths_und

def clustering_coef_bd(*args):
  return _bct.clustering_coef_bd(*args)
clustering_coef_bd = _bct.clustering_coef_bd

def clustering_coef_bu(*args):
  return _bct.clustering_coef_bu(*args)
clustering_coef_bu = _bct.clustering_coef_bu

def clustering_coef_wd(*args):
  return _bct.clustering_coef_wd(*args)
clustering_coef_wd = _bct.clustering_coef_wd

def clustering_coef_wu(*args):
  return _bct.clustering_coef_wu(*args)
clustering_coef_wu = _bct.clustering_coef_wu

def efficiency_local(*args):
  return _bct.efficiency_local(*args)
efficiency_local = _bct.efficiency_local

def charpath_lambda(*args):
  return _bct.charpath_lambda(*args)
charpath_lambda = _bct.charpath_lambda

def connectivity_length(*args):
  return _bct.connectivity_length(*args)
connectivity_length = _bct.connectivity_length

def cycprob_fcyc(*args):
  return _bct.cycprob_fcyc(*args)
cycprob_fcyc = _bct.cycprob_fcyc

def cycprob_pcyc(*args):
  return _bct.cycprob_pcyc(*args)
cycprob_pcyc = _bct.cycprob_pcyc

def distance_bin(*args):
  return _bct.distance_bin(*args)
distance_bin = _bct.distance_bin

def distance_wei(*args):
  return _bct.distance_wei(*args)
distance_wei = _bct.distance_wei

def efficiency_global(*args):
  return _bct.efficiency_global(*args)
efficiency_global = _bct.efficiency_global

def betweenness_bin(*args):
  return _bct.betweenness_bin(*args)
betweenness_bin = _bct.betweenness_bin

def betweenness_wei(*args):
  return _bct.betweenness_wei(*args)
betweenness_wei = _bct.betweenness_wei
MILO = _bct.MILO
SPORNS = _bct.SPORNS

def get_motif_mode():
  return _bct.get_motif_mode()
get_motif_mode = _bct.get_motif_mode

def set_motif_mode(*args):
  return _bct.set_motif_mode(*args)
set_motif_mode = _bct.set_motif_mode

def module_degree_zscore(*args):
  return _bct.module_degree_zscore(*args)
module_degree_zscore = _bct.module_degree_zscore

def participation_coef(*args):
  return _bct.participation_coef(*args)
participation_coef = _bct.participation_coef

def makeevenCIJ(*args):
  return _bct.makeevenCIJ(*args)
makeevenCIJ = _bct.makeevenCIJ

def makelatticeCIJ(*args):
  return _bct.makelatticeCIJ(*args)
makelatticeCIJ = _bct.makelatticeCIJ

def makerandCIJ_bd(*args):
  return _bct.makerandCIJ_bd(*args)
makerandCIJ_bd = _bct.makerandCIJ_bd

def makerandCIJ_bu(*args):
  return _bct.makerandCIJ_bu(*args)
makerandCIJ_bu = _bct.makerandCIJ_bu

def makerandCIJ_wd(*args):
  return _bct.makerandCIJ_wd(*args)
makerandCIJ_wd = _bct.makerandCIJ_wd

def makerandCIJ_wd_wp(*args):
  return _bct.makerandCIJ_wd_wp(*args)
makerandCIJ_wd_wp = _bct.makerandCIJ_wd_wp

def makerandCIJ_wu(*args):
  return _bct.makerandCIJ_wu(*args)
makerandCIJ_wu = _bct.makerandCIJ_wu

def makerandCIJ_wu_wp(*args):
  return _bct.makerandCIJ_wu_wp(*args)
makerandCIJ_wu_wp = _bct.makerandCIJ_wu_wp

def makeringlatticeCIJ(*args):
  return _bct.makeringlatticeCIJ(*args)
makeringlatticeCIJ = _bct.makeringlatticeCIJ

def maketoeplitzCIJ(*args):
  return _bct.maketoeplitzCIJ(*args)
maketoeplitzCIJ = _bct.maketoeplitzCIJ

def latmio_dir(*args):
  return _bct.latmio_dir(*args)
latmio_dir = _bct.latmio_dir

def latmio_dir_connected(*args):
  return _bct.latmio_dir_connected(*args)
latmio_dir_connected = _bct.latmio_dir_connected

def latmio_und(*args):
  return _bct.latmio_und(*args)
latmio_und = _bct.latmio_und

def latmio_und_connected(*args):
  return _bct.latmio_und_connected(*args)
latmio_und_connected = _bct.latmio_und_connected

def randmio_dir(*args):
  return _bct.randmio_dir(*args)
randmio_dir = _bct.randmio_dir

def randmio_dir_connected(*args):
  return _bct.randmio_dir_connected(*args)
randmio_dir_connected = _bct.randmio_dir_connected

def randmio_und(*args):
  return _bct.randmio_und(*args)
randmio_und = _bct.randmio_und

def randmio_und_connected(*args):
  return _bct.randmio_und_connected(*args)
randmio_und_connected = _bct.randmio_und_connected
SQUARE = _bct.SQUARE
RECTANGULAR = _bct.RECTANGULAR
UNDIRECTED = _bct.UNDIRECTED
DIRECTED = _bct.DIRECTED
BINARY = _bct.BINARY
WEIGHTED = _bct.WEIGHTED
POSITIVE = _bct.POSITIVE
SIGNED = _bct.SIGNED
NO_LOOPS = _bct.NO_LOOPS
LOOPS = _bct.LOOPS

def get_safe_mode():
  return _bct.get_safe_mode()
get_safe_mode = _bct.get_safe_mode

def set_safe_mode(*args):
  return _bct.set_safe_mode(*args)
set_safe_mode = _bct.set_safe_mode

def check_status(*args):
  return _bct.check_status(*args)
check_status = _bct.check_status

def is_square(*args):
  return _bct.is_square(*args)
is_square = _bct.is_square

def is_rectangular(*args):
  return _bct.is_rectangular(*args)
is_rectangular = _bct.is_rectangular

def is_undirected(*args):
  return _bct.is_undirected(*args)
is_undirected = _bct.is_undirected

def is_directed(*args):
  return _bct.is_directed(*args)
is_directed = _bct.is_directed

def is_binary(*args):
  return _bct.is_binary(*args)
is_binary = _bct.is_binary

def is_weighted(*args):
  return _bct.is_weighted(*args)
is_weighted = _bct.is_weighted

def is_positive(*args):
  return _bct.is_positive(*args)
is_positive = _bct.is_positive

def is_signed(*args):
  return _bct.is_signed(*args)
is_signed = _bct.is_signed

def has_loops(*args):
  return _bct.has_loops(*args)
has_loops = _bct.has_loops

def has_no_loops(*args):
  return _bct.has_no_loops(*args)
has_no_loops = _bct.has_no_loops

def invert_elements(*args):
  return _bct.invert_elements(*args)
invert_elements = _bct.invert_elements

def remove_loops(*args):
  return _bct.remove_loops(*args)
remove_loops = _bct.remove_loops

def to_binary(*args):
  return _bct.to_binary(*args)
to_binary = _bct.to_binary

def to_positive(*args):
  return _bct.to_positive(*args)
to_positive = _bct.to_positive

def to_undirected_bin(*args):
  return _bct.to_undirected_bin(*args)
to_undirected_bin = _bct.to_undirected_bin

def to_undirected_wei(*args):
  return _bct.to_undirected_wei(*args)
to_undirected_wei = _bct.to_undirected_wei

def gsl_error_handler(*args):
  return _bct.gsl_error_handler(*args)
gsl_error_handler = _bct.gsl_error_handler

def init():
  return _bct.init()
init = _bct.init

def number_of_edges_dir(*args):
  return _bct.number_of_edges_dir(*args)
number_of_edges_dir = _bct.number_of_edges_dir

def number_of_edges_und(*args):
  return _bct.number_of_edges_und(*args)
number_of_edges_und = _bct.number_of_edges_und

def number_of_nodes(*args):
  return _bct.number_of_nodes(*args)
number_of_nodes = _bct.number_of_nodes

def threshold_absolute(*args):
  return _bct.threshold_absolute(*args)
threshold_absolute = _bct.threshold_absolute

def threshold_proportional_dir(*args):
  return _bct.threshold_proportional_dir(*args)
threshold_proportional_dir = _bct.threshold_proportional_dir

def threshold_proportional_und(*args):
  return _bct.threshold_proportional_und(*args)
threshold_proportional_und = _bct.threshold_proportional_und


def degrees_dir(*args):
  return _bct.degrees_dir(*args)
degrees_dir = _bct.degrees_dir

def strengths_dir(*args):
  return _bct.strengths_dir(*args)
strengths_dir = _bct.strengths_dir

def breadth(*args):
  return _bct.breadth(*args)
breadth = _bct.breadth

def breadthdist(*args):
  return _bct.breadthdist(*args)
breadthdist = _bct.breadthdist

def charpath_ecc(*args):
  return _bct.charpath_ecc(*args)
charpath_ecc = _bct.charpath_ecc

def findpaths(*args):
  return _bct.findpaths(*args)
findpaths = _bct.findpaths

def findwalks(*args):
  return _bct.findwalks(*args)
findwalks = _bct.findwalks

def normalized_path_length(*args):
  return _bct.normalized_path_length(*args)
normalized_path_length = _bct.normalized_path_length

def reachdist(*args):
  return _bct.reachdist(*args)
reachdist = _bct.reachdist

def edge_betweenness_bin(*args):
  return _bct.edge_betweenness_bin(*args)
edge_betweenness_bin = _bct.edge_betweenness_bin

def edge_betweenness_wei(*args):
  return _bct.edge_betweenness_wei(*args)
edge_betweenness_wei = _bct.edge_betweenness_wei

def erange(*args):
  return _bct.erange(*args)
erange = _bct.erange
cvar = _bct.cvar

def find_motif34(*args):
  return _bct.find_motif34(*args)
find_motif34 = _bct.find_motif34

def motif3funct_bin(*args):
  return _bct.motif3funct_bin(*args)
motif3funct_bin = _bct.motif3funct_bin

def motif3funct_wei(*args):
  return _bct.motif3funct_wei(*args)
motif3funct_wei = _bct.motif3funct_wei

def motif3funct_wei_v(*args):
  return _bct.motif3funct_wei_v(*args)
motif3funct_wei_v = _bct.motif3funct_wei_v

def motif3generate(arg0 = None, arg1 = None):
  return _bct.motif3generate(arg0, arg1)
motif3generate = _bct.motif3generate

def motif3struct_bin(*args):
  return _bct.motif3struct_bin(*args)
motif3struct_bin = _bct.motif3struct_bin

def motif3struct_wei(*args):
  return _bct.motif3struct_wei(*args)
motif3struct_wei = _bct.motif3struct_wei

def motif3struct_wei_v(*args):
  return _bct.motif3struct_wei_v(*args)
motif3struct_wei_v = _bct.motif3struct_wei_v

def motif4generate(arg0 = None, arg1 = None):
  return _bct.motif4generate(arg0, arg1)
motif4generate = _bct.motif4generate

def motif4funct_bin(*args):
  return _bct.motif4funct_bin(*args)
motif4funct_bin = _bct.motif4funct_bin

def motif4funct_wei(*args):
  return _bct.motif4funct_wei(*args)
motif4funct_wei = _bct.motif4funct_wei

def motif4funct_wei_v(*args):
  return _bct.motif4funct_wei_v(*args)
motif4funct_wei_v = _bct.motif4funct_wei_v

def motif4struct_bin(*args):
  return _bct.motif4struct_bin(*args)
motif4struct_bin = _bct.motif4struct_bin

def motif4struct_wei(*args):
  return _bct.motif4struct_wei(*args)
motif4struct_wei = _bct.motif4struct_wei

def motif4struct_wei_v(*args):
  return _bct.motif4struct_wei_v(*args)
motif4struct_wei_v = _bct.motif4struct_wei_v

def modularity_dir(*args):
  return _bct.modularity_dir(*args)
modularity_dir = _bct.modularity_dir

def modularity_und(*args):
  return _bct.modularity_und(*args)
modularity_und = _bct.modularity_und

def modularity_und_louvain(*args):
  return _bct.modularity_und_louvain(*args)
modularity_und_louvain = _bct.modularity_und_louvain

def makefractalCIJ(*args):
  return _bct.makefractalCIJ(*args)
makefractalCIJ = _bct.makefractalCIJ

def makerandCIJdegreesfixed(*args):
  return _bct.makerandCIJdegreesfixed(*args)
makerandCIJdegreesfixed = _bct.makerandCIJdegreesfixed
cat_all = cvar.cat_all
cat_ctx = cvar.cat_ctx
fve30 = cvar.fve30
fve32 = cvar.fve32
macaque47 = cvar.macaque47
macaque71 = cvar.macaque71

def gsl_free(*args):
  return _bct.gsl_free(*args)
gsl_free = _bct.gsl_free

def mean(*args):
  return _bct.mean(*args)
mean = _bct.mean

def std(*args):
  return _bct.std(*args)
std = _bct.std

def printf(*args):
  return _bct.printf(*args)
printf = _bct.printf

def from_gsl(*args):
  return _bct.from_gsl(*args)
from_gsl = _bct.from_gsl

def to_gslv(*args):
  return _bct.to_gslv(*args)
to_gslv = _bct.to_gslv

def to_gslm(*args):
  return _bct.to_gslm(*args)
to_gslm = _bct.to_gslm

